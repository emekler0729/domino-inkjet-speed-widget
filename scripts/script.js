// Inputs
let repeatLength = 3.5;             // Inches
let numberOfCharacters = 50;
let maxStrokeRate = 9152;           // Strokes per second
let strokeRate = maxStrokeRate;
let lineSpeed = 450;                // Feet per minute
let dryTime = 1.5;
let distanceToRoller = 10*12;

// Constants
const STROKES_PER_CHAR = 6;           // 6 strokes per characters block font
const MIN_DELAY = 5.5;               // 5.5 ms between prints

let displayString = "4TNWB6J1jzE1VCnfId7tiYWV4JwPVMtKzSSTSRexWBxOZ6Q4hP";

// Calculations
// Convert feet per minute to inches per second
function ips(fpm) {
    return fpm / 60.0 * 12.0;
}

function fpm(ips) {
    return ips * 60.0 / 12.0;
}

function scaleFactor(rate, speed) {
    /* 34 is a magic number generated by setting the font to 5.2mm and length to 1 inch
            then counting how many strokes are displayed in the 1 inch area */
    // rate / speed is equivalent to Strokes Per Inch
    return 34.0 / (rate / ips(speed));
}

// Outputs
function charactersPerInch(rate, speed) {
    return rate / ips(speed) / STROKES_PER_CHAR;
}

function actualLength(characters, rate, speed) {
    return characters / (charactersPerInch(rate, speed));
}

function minGap(speed) {
    return ips(speed)/1000*MIN_DELAY;
}

function minLength(characters, rate, speed) {
    return actualLength(characters, rate, speed) + minGap(speed);
}

function maxCharacters(length, rate, speed) {
    return (length - minGap(speed)) * charactersPerInch(rate, speed);
}

function maxSpeed(length, rate, characters) {
    return (10000*rate*length)/((12000*characters)+(11*rate));
}

class DisplayInterface {    
    // Getters for input ids
    static get length() {
        return repeatLength;
    }

    static get characters() {
        return numberOfCharacters;
    }

    static get 'stroke-rate'() {
        return strokeRate;
    }

    static get speed() {
        return lineSpeed;
    }

    static get 'dry-time'() {
        return dryTime;
    }

    static get distance() {
        return distanceToRoller;
    }

    // Setters for input ids
    static set length(val) {
        repeatLength = val < 1 ? 1
                        : val > 12 ? 12
                        : val;
    }

    static set characters(val) {
        numberOfCharacters = val < 1 ? 1 : val;

        function getRandomString(length) {
            function getRandomCharacter() {
                const validCharacters = "ABCDEFGHIJKLMNOPQRSTUVWXYZabdefghijklmnopqrstuvwxyz0123456789"
                return validCharacters.charAt(Math.floor(Math.random() * validCharacters.length))
            }
    
            let result = '';
    
            for(let i = 0; i < length; i++) {
                result += getRandomCharacter();
            }
    
            return result;
        }
        displayString = getRandomString(numberOfCharacters);
    }

    static set 'stroke-rate'(val) {
        strokeRate = val;
    }

    static set speed(val) {
        lineSpeed = val < 1 ? 1 : val;
    }

    static set 'dry-time'(val) {
        dryTime = val < 0.1 ? 0.1 : val;
    }

    static set distance(val) {
        distanceToRoller = val < 0 ? 0 : val;
    }

    // Getters for output ids
    static get cpi() {
        return charactersPerInch(strokeRate, lineSpeed).toFixed(2);
    }

    static get 'min-length'() {
        return minLength(numberOfCharacters, strokeRate, lineSpeed).toFixed(2);
    }

    static get 'max-chars'() {
        return Math.floor(maxCharacters(repeatLength, strokeRate, lineSpeed));
    }

    static get 'max-speed'() {
        return Math.floor(maxSpeed(repeatLength, strokeRate, numberOfCharacters));
    }

    static get 'max-dry'() {
        return Math.floor(fpm(distanceToRoller / dryTime));
    }

    static get 'min-distance'() {
        return Math.ceil(ips(lineSpeed) * dryTime);
    }
}

const inputs = document.querySelectorAll('#controls input');
const outputs = document.querySelectorAll('#outputs input');
const strokeRateInput = document.getElementById('stroke-rate');
const printDisplay = document.getElementById('print');

function initializeDisplay() {
    inputs.forEach(input => input.value = DisplayInterface[input.id]);
    strokeRateInput.value = strokeRateInput.max = maxStrokeRate;
}

function updateDisplay() {
    document.documentElement.style.setProperty('--length', `${repeatLength}in`);
    document.documentElement.style.setProperty('--gap', `${minGap(lineSpeed)}in`);
    printDisplay.innerHTML = `${displayString}`; // gap doesn't seem to work as expected
    document.documentElement.style.setProperty('--scale', scaleFactor(strokeRate, lineSpeed));
    outputs.forEach(output => output.value = DisplayInterface[output.id]);
    if (repeatLength < minLength(numberOfCharacters, strokeRate, lineSpeed)
        || numberOfCharacters > maxCharacters(repeatLength, strokeRate, lineSpeed)
        || lineSpeed > maxSpeed(repeatLength, strokeRate, numberOfCharacters) ) {
            printDisplay.classList.add('print--invalid');
        } else {
            printDisplay.classList.remove('print--invalid');
        }
    console.log(`The stroke rate is ${strokeRate} strokes per second.`);
}

function updateProperty() {
    DisplayInterface[this.id] = this.valueAsNumber;
    this.value = DisplayInterface[this.id];
    updateDisplay();
}

inputs.forEach(input => input.addEventListener('change', updateProperty))

initializeDisplay();
updateDisplay();